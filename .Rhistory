amostra_iris = iris[amostra==1,]
amostrairis
amostra_iris
dim(amostra_iris)
# Gerando a amostra
amostra_iris = iris[amostra==1,]
amostra_iris
dim(amostra_iris)
# Repetir o experimento (vem os mesmos valores acima)
set.seed(2345)
sample(c(1000), 1)
set.seed(2345)
set.seed(2345)
sample(c(1000), 1)
# Repetindo
set.seed(2345)
sample(c(1000), 1)
install.packages("TeachingSampling")
# install.packages("TeachingSampling")
library("TeachingSampling")
install.packages("Rtools")
amostra = S.SY(150, 10)
amostra
dim(amostra)
amostra
amostra
# gerando amostra sistematica até 150 em 10 grupos
amostra = S.SY(150, 10)
amostra
amostra_iris = iris[amostra,]
amostra_iris = iris[amostra,]
amostra_iris = iris[amostra,]
amostra_iris
dim(amostra_iris)
install.packages("sampling")
library("sampling")
proporcao = 25
amostra_iris = strata(data=iris, stratanames=c('Species'), size=c(rep(proporcao, 3)), method='srswor')
# Exibindo resultado através de um sumario
summary(amostra_iris)
infert
summary(infert)
# outro exemplo usando conjunto de dados infert (características de infertilidade)
infert
summary(infert)
amostra_infert = strata(data = infert, stratanames = c("education"), size = c(5,48,47), method = 'srswor)
# resultado
amostra_infert
summary(amostra_infert)
amostra_infert = strata(data = infert, stratanames = c("education"), size = c(5,48,47), method = 'srswor)
# resultado
amostra_infert
summary(amostra_infert)
amostra_infert
amostra_infert = strata(data = infert, stratanames = c("education"), size = c(5,48,47), method = 'srswor)
amostra_infert = strata(data = infert, stratanames = c("education"), size = c(5,48,47), method = 'srswor')
# resultado
amostra_infert
summary(amostra_infert)
# Dados dos jogadores
jogadores = c(40000, 18000, 12000, 250000, 30000, 140000, 300000, 40000, 800000)
jogadores
mean(jogadores)
median(jogadores)
# Quartis
quartis = quantile(jogadores)
quartis
quartis[4]
sd(jogadores)
summary(jogadores)
options(warn=-1)
install.packages("semTools")
library(semTools)
z = rep(0, 500)
# Gera as amostras
for (i in 1:500) {
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(5, 2), kurtosis = c(3, 3))
# grava a média da amostra
z[i] = mean(m)
#imprime as 3 primeiras
if (i < 4) {
hist(m, breaks=50, main=paste0("Histrograma", i))
}
}
m
# m Gera as amostras/dados enviesados(por isso o skewness, kurtosis)
for (i in 1:500) {
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(5, 2), kurtosis = c(3, 3))
# m
# grava a média da amostra
z[i] = mean(m)
#imprime as 3 primeiras
if (i < 4) {
hist(m, breaks=50, main=paste0("Histrograma ", i))
}
}
hist(z)
set.seed(123)
x = rnorm(1000)
qqnorm(x)
# Gráfico QQ (rodar com ctrl shif enter)
qqnorm(x)
#linha
qqline(x)
#linha
qqline(x)
#linha
qqline(x)
qqnorm(x)
# Gráfico QQ (rodar com ctrl shif enter)
qqnorm(x)
#linha
qqline(x)
shapiro.test(x)
hist(x, main="")
hist(x)
# Histograma com linha de densidade (rodar com ctrl shif enter)
hist(x, main='')
par(new=TrUE)
# Histograma com linha de densidade (rodar com ctrl shif enter)
hist(x, main='')
par(new=TRUE)
plot(density(x), ylab="", xlab="", axes=F, lwd=2.5)
# Exemplo com Dados não normalmente distribuidos
install.packages("semTools")
library(semTools)
install.packages("semTools")
library(semTools)
# Exemplo com Dados não normalmente distribuidos
# install.packages("semTools")
library(semTools)
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness=c(5, 2), kurtosis= c(3,3))
qqnorm(m)
qqline(m)
shapiro.test(m)
shapiro.test(m)
hist(m, main="")
# Histograma (rodar com ctrl shif enter)
hist(m, main="")
par(new=TRUE)
plot(density(x), ylab="", xlab="", axes=F, lwd=2.5)
mean(x)
mean(x)
# Amostra Pequena
# Espera-se uma média de 3,5
# Gerando a média
x = sample(1:6, 6, replace = T)
mean(x)
# Amostra Pequena
# Espera-se uma média de 3,5
# Gerando a média
x = sample(1:6, 6, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
plot(cars)
plot(cars)
getwd()
# Multiplicação
5 * 5
6 / 2
# Potência
3^2
3**2
# Módulo
16 %% 3
x = 7
y = 5
# Operadores
x > 8
x < 8
x <= 8
x >= 8
x == 8
x != 8
# And
(x==8) & (x==6)
(x==7) & (x==5)
(x==8) & (x==5)
# Or
(x==8) | (x>5)
(x==8) & (x>=5)
# Not
x > 8
print(!x > 8)
getwd()
var1
var1 = 100
var1
var1
var1
var1
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
vari
# criando variáveis
var1
# criando variáveis
var1
mode(var1)
var1 = 100
var1
mode(var1)
help("mode")
sqrt(var1)
help("sqrt")
var1 = var2
var2 = var1
var2
mode(var2)
typeof(var2)
help("typeof")
var2 = var1
var2
mode(var2)
typeof(var2)
help("typeof")
var3 = c("primeiro", "segundo", "terceiro")
var3
mode(var3)
var4 = function(x) {x+3}
var4
mode(var4)
var5 = as.character(var1)
var5
mode(var5)
x <- c(1,2,3)
x
x1 = c(1,2,3)
x1
c(1,2,3) -> y
y
assign("z", c(6.3,4,-2)) # função para atribuir, atribuimos o veotr para "z"
z
# verificando o valor em uma posição específica
x[1]
x[1]
# verificar objetos
ls()
# verificando o valor em uma posição específica
z[1]
# verificar objetos
ls()
objects()
ls()
objects()
# remover objetos (variaveis)
rm(x)
x
nomes <- character()
idades <- numeric()
itens <- numeric()
codigos <- integer()
View(iris)
plot(iris)
# Criar gráficos
plot(1:25)
?plot
plot(iris$Sepal.Length, iris$Petal.Length)
plot(iris$Sepal.Length, iris$Sepal.Width)
# Criar gráficos
plot(1:25)
# Criar gráficos
plot(1:25)
plot(iris$Sepal.Length, iris$Sepal.Width)
plot(iris$Sepal.Length, iris$Sepal.Width)
?subset
View(airquality)
subset(airquality, Temp > 80, select = c(Ozone, Temp))
View(subset(airquality, Temp > 80, select = c(Ozone, Temp)))
View(subset(airquality, Temp > 80))
View(iris)
df_ex7 = subset(iris, Sepal.Length > 7)
df_ex7
View(df_ex7)
str(iris)
View(iris)
install.packages('dplyr')
?slice
?slice
help(slice)
??slice
?slice
?slice.index
df_ex8 = slice(iris)
slice(iris)
slice.index(iris)
df_ex8 = subset(iris, Sepal.Length > 7)
View(df_ex8)
df_ex9 = slice.index(iris, 15)
library(dplyr)
?slice
?slice
df_ex9 = slice(iris)
df_ex9
head(iris)
head(iris, 1)
?subset
?slice
df_ex9 = slice(iris, n=15)
df_ex9 = slice(iris)
df_ex9
df_ex9 %>% slice(15:n())
iris %>% slice(15:n())
df_ex9 = iris %>% slice(15:n())
df_ex9
View(df_ex9)
df_ex9 = iris %>% slice(n())
View(df_ex9)
df_ex9 = iris %>% slice(5:n())
View(df_ex9)
tail(mtcars, 1)
View(tail(mtcars, 1))
mtcars %>% slice(5:n())
View(mtcars %>% slice(5:n()))
View(slice(mtcars, -(1:4)))
df_ex9 = iris %>% slice_sample(n = 15)
View(df_ex9)
class(df_ex8)
class(df_ex9)
mode(df_ex8)
typeof(df_ex8)
mode(df_ex9)
typeof(df_ex9)
View(df_ex9)
df_ex9 = iris %>% slice_sample(n = 15)
View(df_ex9)
df_ex9 = iris %>% slice_sample(n = 15)
View(df_ex9)
RSiteSearch()
RSiteSearch(filter)
RSiteSearch('filter')
?filter
help('filter')
help("filter")
help(filter)
RSiteSearch('filter')
filter(df_ex9, Sepal.Length > 6)
View(filter(df_ex9, Sepal.Length > 6))
class(vet_ex1)
vet_ex1 <- 1:30
class(vet_ex1)
vet_ex1 <- c(1:30)
class(vet_ex1)
class(df_ex4)
df_ex4 = read.table('https://grodri.github.io/datasets/effort.dat')
df_ex4
class(df_ex4)
class(df_ex4)
df_ex4 <- data.frame(read.table('https://grodri.github.io/datasets/effort.dat'))
df_ex4
class(df_ex4)
dim(iris)
summary(iris)
str(iris)
df_ex8 <- subset(iris, Sepal.Length > 7)
View(df_ex8)
novo_iris = slice(novo_iris, 1:15)
novo_iris <- iris
novo_iris = slice(novo_iris, 1:15)
novo_iris
df_ex9
df_ex9
df_ex9 = iris %>% slice_sample(n = 15) # retorna 15 linhas aleatórias
df_ex9
novo_iris = slice(novo_iris, 1:15)
novo_iris
novo_iris = slice(novo_iris, 1:15)
novo_iris
View(filter(novo_iris, Sepal.Length > 6))
filter(novo_iris, Sepal.Length > 6)
View(filter(novo_iris, Sepal.Length > 6))
View(filter(novo_iris, Sepal.Length >= 6))
View(filter(novo_iris, Sepal.Length < 6))
# Configurando Diretório de Trabalho
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/3.Linguagem-R- Fatores-Estruturas-de-Controle-e-Funcoes")
getwd()
install.packages()
install.packages('readr')
install.packages('data.table')
install.packages('dplyr')
install.packages('dplyr')
install.packages("dplyr")
install.packages('ggplot2')
library(readr)
library(dplyr)
library(ggplot2)
library(scales)
library(data.table)
library(readr)
library(dplyr)
library(ggplot2)
library(scales)
library(data.table)
system.time(df_teste1 <- read.csv2("TemperaturasGlobais/TemperaturasGlobais.csv"))
# Usando read.table()
system.time(df_teste1 <- read.table("TemperaturasGlobais/TemperaturasGlobais.csv"))
# Usando read.csv2()
system.time(df_teste1 <- read.csv2("TemperaturasGlobais/TemperaturasGlobais.csv"))
# Usando read.table()
system.time(df_teste2 <- read.table("TemperaturasGlobais/TemperaturasGlobais.csv"))
# Usando fread()
?fread
system.time(df <- fread("TemperaturasGlobais/TemperaturasGlobais.csv"))
system.time(df <- fread("TemperaturasGlobais/TemperaturasGlobais.csv"))
system.time(df <- fread("TemperaturasGlobais/TemperaturasGlobais.csv"))
view(df)
View(df)
# Criando subsets dos dados carregados
str(df)
cidadesBrasil <- subset(df, Country == 'Brazil')
View(cidadesBrasil)
str(cidadesBrasil)
cidades <- subset(df, City)
cidades <- subset(df, City == 'Niteroi')
View(Cidades)
View(cidades)
cidades <- subset(df, City == 'Alagoinhas')
View(cidades)
cidades <- subset(df, City == 'Ala')
cidades <- subset(df, City == 'Rio de Janeiro')
View(cidades)
cidades <- subset(df, City == 'Niterói')
View(cidadesBrasil)
View(cidadesBrasil)
cidadesBrasil <- subset(df, Country == 'Brazil')
View(cidadesBrasil)
cidades <- subset(df, City == 'Rio De Janeiro')
View(cidades)
gc()
system.time(df <- fread("TemperaturasGlobais/TemperaturasGlobais.csv"))
cidadesBrasil <- subset(df, Country == 'Brazil')
cidadesBrasil <- na.omit(cidadesBrasil) # omitindo qualquer valor NA
cidadesBrasil <- subset(df, Country == 'Brazil')
cidadesBrasil <- na.omit(cidadesBrasil) # omitindo qualquer valor NA
head(cidadesBrasil)
nrow(df)
nrow(cidadesBrasil)
dim(cidadesBrasil)
View(cidadesBrasil)
View(cidadesBrasil)
cidadesBrasil$dt <- as.POSIXct(cidadesBrasil$dt, format='%Y-%m-%d')
View(cidadesBrasil)
cidadesBrasil <- subset(df, Country == 'Brazil')
cidadesBrasil <- na.omit(cidadesBrasil) # omitindo qualquer valor NA
View(cidadesBrasil)
cidadesBrasil$dt <- as.POSIXct(cidadesBrasil$dt, format='%Y-%m-%d')
View(cidadesBrasil)
cidadesBrasil$dt <- as.POSIXct(cidadesBrasil$dt, format='%d-%m-%Y')
View(cidadesBrasil)
cidadesBrasil$dt <- as.POSIXct(cidadesBrasil$dt, format='%d-%m-%Y')
View(cidadesBrasil)
cidadesBrasil <- subset(df, Country == 'Brazil')
cidadesBrasil <- na.omit(cidadesBrasil) # omitindo qualquer valor NA
View(cidadesBrasil)
cidadesBrasil$dt <- as.POSIXct(cidadesBrasil$dt, format='%d-%m-%Y')
cidadesBrasil$Month <- month(cidadesBrasil$dt)
cidadesBrasil$Year <- year(cidadesBrasil$dt)
View(cidadesBrasil)
plm <- subset(cidadesBrasil, city == 'Palmas')
plm <- subset(cidadesBrasil, City == 'Palmas')
View(plm)
plm <- subset(plm, Year %in% c(1796,1846,1946,1996,2012))
View(plm)
recf <- subset(cidadesBrasil, City == 'Recife')
recf <- subset(recf, Year %in% c(1796,1846,1946,1996,2012))
View(recf)
crt <- subset(cidadesBrasil, City == 'Curitiba')
crt <- subset(crt, Year %in% c(1796,1846,1946,1996,2012))
View(crt)
p_plm <- ggplot(plm, aes(x = (Month), y = AverageTemperature, color = as.factor(Year))) +
geom_smooth(se = FALSE, fill = NA, size = 2) +
theme_light(base_size = 20) +
xlab("Mês") +
ylab("Temperatura Média") +
scale_color_discrete("") +
ggtitle("Temperatura Média ao logo dos anos em Palmas") +
theme(plot.title = element_text(size= 18))
p_crt <- ggplot(crt, aes(x = (Month), y = AverageTemperature, color = as.factor(Year))) +
geom_smooth(se = FALSE, fill = NA, size = 2) +
theme_light(base_size = 20) +
xlab("Mês") +
ylab("Temperatura Média") +
scale_color_discrete("") +
ggtitle("Temperatura Média ao logo dos anos em Curitiba") +
theme(plot.title = element_text(size= 18))
p_recf <- ggplot(recf, aes(x = (Month), y = AverageTemperature, color = as.factor(Year))) +
geom_smooth(se = FALSE, fill = NA, size = 2) +
theme_light(base_size = 20) +
xlab("Mês") +
ylab("Temperatura Média") +
scale_color_discrete("") +
ggtitle("Temperatura Média ao logo dos anos em Recife") +
theme(plot.title = element_text(size= 18))
p_plm
p_crt
p_recf
