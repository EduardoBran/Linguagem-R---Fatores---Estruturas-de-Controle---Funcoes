bwplot(dados$VALOREMPENHO, main="VALOR DE EMEPENHO")
histogram(dados$PIB, main="PIB", xlab="Volume", aspect=1, nint=20, type='percent')
amostra
# 150 amostras, de 0 e 1, com reposição, problemas equivalentes
amostra = sample(c(0, 1)), 150, replace = TRUE, prob=c(0.5, 0.5))
amostra
# 150 amostras, de 0 e 1, com reposição, problemas equivalentes
amostra = sample(c(0, 1), 150, replace = TRUE, prob=c(0.5, 0.5))
amostra
summary(as.factor(amostra))
amostra
summary(as.factor(amostra))
summary(as.factor(amostra))
# 150 amostras, de 0 e 1, com reposição, probabilidade equivalentes
amostra = sample(c(0, 1), 150, replace = TRUE, prob=c(0.5, 0.5))
amostra
summary(as.factor(amostra))
```{r}
# 150 amostras, de 0 e 1, com reposição, mais chances para zero
amostra = sample(c(0, 1), 150, replace = TRUE, prob=c(0.7, 0.3))
amostra
summary(as.factor(amostra))
# 150 amostras, de 0 e 1, com reposição, probabilidade equivalentes
amostra = sample(c(0, 1), 150, replace = TRUE, prob=c(0.5, 0.5))
amostra
summary(as.factor(amostra))
# 150 amostras, de 0 e 1, com reposição, mais chances para zero
amostra = sample(c(0, 1), 150, replace = TRUE, prob=c(0.7, 0.3))
amostra
summary(as.factor(amostra))
amostra
# 150 amostras, de 0 e 1, com reposição, mais chances para zero
amostra = sample(c(0, 1), 150, replace = FALSE)
amostra
amostra
amostra
amostra2
# 150 amostras, de 0 e 1, sem reposição, mais chances para zero
amostra2 = sample(c(0:1000), 150, replace = FALSE)
amostra2
# 150 amostras, de 0 a 1000, sem reposição, mais chances para zero
# nao repete numeros
amostra2 = sample(c(0:1000), 150, replace = FALSE)
amostra2
# Gerando amostra de conjunto de dados Iris
# Gerando 30% dos dados de iris
amostra = sample(c(0, 1), 150, replace = TRUE, prob=c(0.7, 0.3))
summary(as.factor(amostra))
# Gerando amostra de conjunto de dados Iris
# Gerando 30% dos dados de iris
amostra = sample(c(0, 1), 150, replace = TRUE, prob=c(0.7, 0.3))
summary(as.factor(amostra))
amostrairis
# Gerando a amostra
amostra_iris = iris[amostra==1,]
amostrairis
amostra_iris
dim(amostra_iris)
# Gerando a amostra
amostra_iris = iris[amostra==1,]
amostra_iris
dim(amostra_iris)
# Repetir o experimento (vem os mesmos valores acima)
set.seed(2345)
sample(c(1000), 1)
set.seed(2345)
set.seed(2345)
sample(c(1000), 1)
# Repetindo
set.seed(2345)
sample(c(1000), 1)
install.packages("TeachingSampling")
# install.packages("TeachingSampling")
library("TeachingSampling")
install.packages("Rtools")
amostra = S.SY(150, 10)
amostra
dim(amostra)
amostra
amostra
# gerando amostra sistematica até 150 em 10 grupos
amostra = S.SY(150, 10)
amostra
amostra_iris = iris[amostra,]
amostra_iris = iris[amostra,]
amostra_iris = iris[amostra,]
amostra_iris
dim(amostra_iris)
install.packages("sampling")
library("sampling")
proporcao = 25
amostra_iris = strata(data=iris, stratanames=c('Species'), size=c(rep(proporcao, 3)), method='srswor')
# Exibindo resultado através de um sumario
summary(amostra_iris)
infert
summary(infert)
# outro exemplo usando conjunto de dados infert (características de infertilidade)
infert
summary(infert)
amostra_infert = strata(data = infert, stratanames = c("education"), size = c(5,48,47), method = 'srswor)
# resultado
amostra_infert
summary(amostra_infert)
amostra_infert = strata(data = infert, stratanames = c("education"), size = c(5,48,47), method = 'srswor)
# resultado
amostra_infert
summary(amostra_infert)
amostra_infert
amostra_infert = strata(data = infert, stratanames = c("education"), size = c(5,48,47), method = 'srswor)
amostra_infert = strata(data = infert, stratanames = c("education"), size = c(5,48,47), method = 'srswor')
# resultado
amostra_infert
summary(amostra_infert)
# Dados dos jogadores
jogadores = c(40000, 18000, 12000, 250000, 30000, 140000, 300000, 40000, 800000)
jogadores
mean(jogadores)
median(jogadores)
# Quartis
quartis = quantile(jogadores)
quartis
quartis[4]
sd(jogadores)
summary(jogadores)
options(warn=-1)
install.packages("semTools")
library(semTools)
z = rep(0, 500)
# Gera as amostras
for (i in 1:500) {
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(5, 2), kurtosis = c(3, 3))
# grava a média da amostra
z[i] = mean(m)
#imprime as 3 primeiras
if (i < 4) {
hist(m, breaks=50, main=paste0("Histrograma", i))
}
}
m
# m Gera as amostras/dados enviesados(por isso o skewness, kurtosis)
for (i in 1:500) {
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(5, 2), kurtosis = c(3, 3))
# m
# grava a média da amostra
z[i] = mean(m)
#imprime as 3 primeiras
if (i < 4) {
hist(m, breaks=50, main=paste0("Histrograma ", i))
}
}
hist(z)
set.seed(123)
x = rnorm(1000)
qqnorm(x)
# Gráfico QQ (rodar com ctrl shif enter)
qqnorm(x)
#linha
qqline(x)
#linha
qqline(x)
#linha
qqline(x)
qqnorm(x)
# Gráfico QQ (rodar com ctrl shif enter)
qqnorm(x)
#linha
qqline(x)
shapiro.test(x)
hist(x, main="")
hist(x)
# Histograma com linha de densidade (rodar com ctrl shif enter)
hist(x, main='')
par(new=TrUE)
# Histograma com linha de densidade (rodar com ctrl shif enter)
hist(x, main='')
par(new=TRUE)
plot(density(x), ylab="", xlab="", axes=F, lwd=2.5)
# Exemplo com Dados não normalmente distribuidos
install.packages("semTools")
library(semTools)
install.packages("semTools")
library(semTools)
# Exemplo com Dados não normalmente distribuidos
# install.packages("semTools")
library(semTools)
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness=c(5, 2), kurtosis= c(3,3))
qqnorm(m)
qqline(m)
shapiro.test(m)
shapiro.test(m)
hist(m, main="")
# Histograma (rodar com ctrl shif enter)
hist(m, main="")
par(new=TRUE)
plot(density(x), ylab="", xlab="", axes=F, lwd=2.5)
mean(x)
mean(x)
# Amostra Pequena
# Espera-se uma média de 3,5
# Gerando a média
x = sample(1:6, 6, replace = T)
mean(x)
# Amostra Pequena
# Espera-se uma média de 3,5
# Gerando a média
x = sample(1:6, 6, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
plot(cars)
plot(cars)
getwd()
# Multiplicação
5 * 5
6 / 2
# Potência
3^2
3**2
# Módulo
16 %% 3
x = 7
y = 5
# Operadores
x > 8
x < 8
x <= 8
x >= 8
x == 8
x != 8
# And
(x==8) & (x==6)
(x==7) & (x==5)
(x==8) & (x==5)
# Or
(x==8) | (x>5)
(x==8) & (x>=5)
# Not
x > 8
print(!x > 8)
getwd()
var1
var1 = 100
var1
var1
var1
var1
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
vari
# criando variáveis
var1
# criando variáveis
var1
mode(var1)
var1 = 100
var1
mode(var1)
help("mode")
sqrt(var1)
help("sqrt")
var1 = var2
var2 = var1
var2
mode(var2)
typeof(var2)
help("typeof")
var2 = var1
var2
mode(var2)
typeof(var2)
help("typeof")
var3 = c("primeiro", "segundo", "terceiro")
var3
mode(var3)
var4 = function(x) {x+3}
var4
mode(var4)
var5 = as.character(var1)
var5
mode(var5)
x <- c(1,2,3)
x
x1 = c(1,2,3)
x1
c(1,2,3) -> y
y
assign("z", c(6.3,4,-2)) # função para atribuir, atribuimos o veotr para "z"
z
# verificando o valor em uma posição específica
x[1]
x[1]
# verificar objetos
ls()
# verificando o valor em uma posição específica
z[1]
# verificar objetos
ls()
objects()
ls()
objects()
# remover objetos (variaveis)
rm(x)
x
nomes <- character()
idades <- numeric()
itens <- numeric()
codigos <- integer()
gc()
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/3.Linguagem-R- Fatores-Estruturas-de-Controle-e-Funcoes")
getwd()
vec1 <- c('Macho', 'Femea', 'Femea', 'Macho', 'Macho')
vec1
fac_vec1 <- factor(vec1)
fac_vec1
class(vec1)
class(fac_vec1)
animais <- c('Zebra', 'Pantera', 'Rinoceronte', 'Macaco', 'Tigre')
animais
class(animais)
fac_animais <- factor(animais)
fac_animais
class(fac_animais)
levels(fac_animais)
grad <- c('Mestrado', 'Doutorado', 'Bacharelado', 'Mestrado', 'Mestrado')
grad
fac_grad <- factor(grad, order = TRUE, levels = c('Doutorado', 'Mestrado', 'Bacharelado'))
fac_grad
levels(fac_grad)
summary(fac_grad)
summary(grad)
vec2 <- c('M', 'F', 'F', 'M', 'M', 'M', 'F', 'F', 'M', 'M', 'M', 'F', 'F', 'M', 'M')
vec2
fac_vec2 <- factor(vec2)
fac_vec2
levels(fac_vec2)
levels(fac_vec2) <- c('Femea', 'Macho')
fac_vec2
summary(fac_vec2)
summary(vec2)
data = c(1,2,2,3,1,2,3,3,1,2,3,3,1)
data
fac_data = factor(data)
fac_data
rdata = factor(data, labels = c('I', 'II', 'III'))
rdata
data = c(1,2,2,3,1,2,3,3,1,2,3,3,1)
data
fac_data = factor(data)
fac_data
rdata = factor(data, labels = c('I', 'II', 'III'))
rdata
set1 <- c('AA', 'B', 'BA', 'CC', 'CA', 'AA', 'BA', 'CC', 'CC')
set1
fac_set1 <- factor(set1)
fac_set1
class(fac_set1)
is.ordered(fac_set1)
ord_set1 <- factor(set1,
levels = c('CA', 'BA', 'AA', 'CC', 'B'),
ordered = TRUE)
ord_set1
is.ordered(ord_set1)
as.numeric(ord_set1)
table(ord_set1)
df <- read.csv2('etnias.csv', sep = ',')
View(df)
str(df)
# Variável original (antes da transformação)
levels(df$Etnia)
summary(df$Etnia)
df$Etnia <- as.factor(df$Etnia)
levels(df$Etnia)
summary(df$Etnia)
df$Etnia
str(df)
boxplot(df$Idade ~ df$Etnia)
boxplot(df$Idade ~ df$Etnia, xlab = 'Etnia', ylab = 'Idade', main = 'Idade por Etnia')
summary(lm(Idade ~ Etnia, data = df))
df
str(df)
df$Estado_Civil.cat <- factor(df$Estado_Civil, labels = c('Solteiro', 'Casado', 'Divorciado'))
df
str(df)
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/3.Linguagem-R- Fatores-Estruturas-de-Controle-e-Funcoes")
getwd()
vec1 <- c(1001, 1002, 1003, 1004, 1005)
vec2 <- c(0, 1, 1, 0, 2)
vec3 <- c('Verde', 'Laranja', 'Azul', 'Laranja', 'Verde')
df <- data.frame(vec1, vec2, vec3)
df
str(df)
df$vec3 <- factor(df$vec3, labels = c('Azul', 'Laranja', 'Verde'))
str(df)
levels(df$vec3)
df$cat1 <- factor(df$vec3, labels = c('cor2', 'cor1', 'cor3'))
df
str(df)
df$cat2 <- factor(df$vec2, labels = c('Divorciado', 'Casado', 'Solteiro'))
df
str(df)
levels(df$cat2)
summary(df$cat2)
View(df)
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/3.Linguagem-R- Fatores-Estruturas-de-Controle-e-Funcoes")
getwd()
x = 25
if (x < 30){
"Este número é menor que 30"
}
if (x < 20){
"Este número é menor que 30"
}
if (x < 30)
"Este número é menor que 30"
if (x < 7){
'Este número é menor que 7'
} else {
'Este número é maior que 7'
}
x = 6
if (x < 7){
'Este número é menor que 7'
} else {
'Este número é maior que 7'
}
x = 25
x = 7
if (x < 7){
'Este número é menor que 7'
} else if (x == 7){
'Este número é igual a 7'
} else {
'Este número é maior que 7'
}
x = 8
if (x < 7){
'Este número é menor que 7'
} else if (x == 7){
'Este número é igual a 7'
} else {
'Este número é maior que 7'
if (x < 7){
'Este número é menor que 7'
} else if (x == 7){
'Este número é igual a 7'
} else {
'Este número é maior que 7'
}
if (x < 7){
'Este número é menor que 7'
} else if (x == 7){
'Este número é igual a 7'
} else {
'Este número é maior que 7'
}
x = 8
if (x < 7){
'Este número é menor que 7'
} else if (x == 7){
'Este número é igual a 7'
} else {
'Este número é maior que 7'
}
x = 7
if (x < 7){
'Este número é menor que 7'
} else if (x == 7){
'Este número é igual a 7'
} else {
'Este número é maior que 7'
}
x = 7
if (x < 7){
'Este número é menor que 7'
} else if (x == 7){
'Este número é igual a 7'
} else {
'Este número é maior que 7'
}
if (x < 7){
'Este número é menor que 7'
} else if(x == 7){
'Este número é igual a 7'
} else {
'Este número é maior que 7'
}
if (x < 7){
print('Este número é menor que 7')
} else if (x == 7){
print('Este número é igual a 7')
} else {
print('Este número é maior que 7')
}
x = 25
x = 25
x = 25
x = 25
