summary(as.factor(amostra))
# 150 amostras, de 0 e 1, com reposição, probabilidade equivalentes
amostra = sample(c(0, 1), 150, replace = TRUE, prob=c(0.5, 0.5))
amostra
summary(as.factor(amostra))
# 150 amostras, de 0 e 1, com reposição, mais chances para zero
amostra = sample(c(0, 1), 150, replace = TRUE, prob=c(0.7, 0.3))
amostra
summary(as.factor(amostra))
amostra
# 150 amostras, de 0 e 1, com reposição, mais chances para zero
amostra = sample(c(0, 1), 150, replace = FALSE)
amostra
amostra
amostra
amostra2
# 150 amostras, de 0 e 1, sem reposição, mais chances para zero
amostra2 = sample(c(0:1000), 150, replace = FALSE)
amostra2
# 150 amostras, de 0 a 1000, sem reposição, mais chances para zero
# nao repete numeros
amostra2 = sample(c(0:1000), 150, replace = FALSE)
amostra2
# Gerando amostra de conjunto de dados Iris
# Gerando 30% dos dados de iris
amostra = sample(c(0, 1), 150, replace = TRUE, prob=c(0.7, 0.3))
summary(as.factor(amostra))
# Gerando amostra de conjunto de dados Iris
# Gerando 30% dos dados de iris
amostra = sample(c(0, 1), 150, replace = TRUE, prob=c(0.7, 0.3))
summary(as.factor(amostra))
amostrairis
# Gerando a amostra
amostra_iris = iris[amostra==1,]
amostrairis
amostra_iris
dim(amostra_iris)
# Gerando a amostra
amostra_iris = iris[amostra==1,]
amostra_iris
dim(amostra_iris)
# Repetir o experimento (vem os mesmos valores acima)
set.seed(2345)
sample(c(1000), 1)
set.seed(2345)
set.seed(2345)
sample(c(1000), 1)
# Repetindo
set.seed(2345)
sample(c(1000), 1)
install.packages("TeachingSampling")
# install.packages("TeachingSampling")
library("TeachingSampling")
install.packages("Rtools")
amostra = S.SY(150, 10)
amostra
dim(amostra)
amostra
amostra
# gerando amostra sistematica até 150 em 10 grupos
amostra = S.SY(150, 10)
amostra
amostra_iris = iris[amostra,]
amostra_iris = iris[amostra,]
amostra_iris = iris[amostra,]
amostra_iris
dim(amostra_iris)
install.packages("sampling")
library("sampling")
proporcao = 25
amostra_iris = strata(data=iris, stratanames=c('Species'), size=c(rep(proporcao, 3)), method='srswor')
# Exibindo resultado através de um sumario
summary(amostra_iris)
infert
summary(infert)
# outro exemplo usando conjunto de dados infert (características de infertilidade)
infert
summary(infert)
amostra_infert = strata(data = infert, stratanames = c("education"), size = c(5,48,47), method = 'srswor)
# resultado
amostra_infert
summary(amostra_infert)
amostra_infert = strata(data = infert, stratanames = c("education"), size = c(5,48,47), method = 'srswor)
# resultado
amostra_infert
summary(amostra_infert)
amostra_infert
amostra_infert = strata(data = infert, stratanames = c("education"), size = c(5,48,47), method = 'srswor)
amostra_infert = strata(data = infert, stratanames = c("education"), size = c(5,48,47), method = 'srswor')
# resultado
amostra_infert
summary(amostra_infert)
# Dados dos jogadores
jogadores = c(40000, 18000, 12000, 250000, 30000, 140000, 300000, 40000, 800000)
jogadores
mean(jogadores)
median(jogadores)
# Quartis
quartis = quantile(jogadores)
quartis
quartis[4]
sd(jogadores)
summary(jogadores)
options(warn=-1)
install.packages("semTools")
library(semTools)
z = rep(0, 500)
# Gera as amostras
for (i in 1:500) {
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(5, 2), kurtosis = c(3, 3))
# grava a média da amostra
z[i] = mean(m)
#imprime as 3 primeiras
if (i < 4) {
hist(m, breaks=50, main=paste0("Histrograma", i))
}
}
m
# m Gera as amostras/dados enviesados(por isso o skewness, kurtosis)
for (i in 1:500) {
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(5, 2), kurtosis = c(3, 3))
# m
# grava a média da amostra
z[i] = mean(m)
#imprime as 3 primeiras
if (i < 4) {
hist(m, breaks=50, main=paste0("Histrograma ", i))
}
}
hist(z)
set.seed(123)
x = rnorm(1000)
qqnorm(x)
# Gráfico QQ (rodar com ctrl shif enter)
qqnorm(x)
#linha
qqline(x)
#linha
qqline(x)
#linha
qqline(x)
qqnorm(x)
# Gráfico QQ (rodar com ctrl shif enter)
qqnorm(x)
#linha
qqline(x)
shapiro.test(x)
hist(x, main="")
hist(x)
# Histograma com linha de densidade (rodar com ctrl shif enter)
hist(x, main='')
par(new=TrUE)
# Histograma com linha de densidade (rodar com ctrl shif enter)
hist(x, main='')
par(new=TRUE)
plot(density(x), ylab="", xlab="", axes=F, lwd=2.5)
# Exemplo com Dados não normalmente distribuidos
install.packages("semTools")
library(semTools)
install.packages("semTools")
library(semTools)
# Exemplo com Dados não normalmente distribuidos
# install.packages("semTools")
library(semTools)
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness=c(5, 2), kurtosis= c(3,3))
qqnorm(m)
qqline(m)
shapiro.test(m)
shapiro.test(m)
hist(m, main="")
# Histograma (rodar com ctrl shif enter)
hist(m, main="")
par(new=TRUE)
plot(density(x), ylab="", xlab="", axes=F, lwd=2.5)
mean(x)
mean(x)
# Amostra Pequena
# Espera-se uma média de 3,5
# Gerando a média
x = sample(1:6, 6, replace = T)
mean(x)
# Amostra Pequena
# Espera-se uma média de 3,5
# Gerando a média
x = sample(1:6, 6, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
plot(cars)
plot(cars)
getwd()
# Multiplicação
5 * 5
6 / 2
# Potência
3^2
3**2
# Módulo
16 %% 3
x = 7
y = 5
# Operadores
x > 8
x < 8
x <= 8
x >= 8
x == 8
x != 8
# And
(x==8) & (x==6)
(x==7) & (x==5)
(x==8) & (x==5)
# Or
(x==8) | (x>5)
(x==8) & (x>=5)
# Not
x > 8
print(!x > 8)
getwd()
var1
var1 = 100
var1
var1
var1
var1
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
vari
# criando variáveis
var1
# criando variáveis
var1
mode(var1)
var1 = 100
var1
mode(var1)
help("mode")
sqrt(var1)
help("sqrt")
var1 = var2
var2 = var1
var2
mode(var2)
typeof(var2)
help("typeof")
var2 = var1
var2
mode(var2)
typeof(var2)
help("typeof")
var3 = c("primeiro", "segundo", "terceiro")
var3
mode(var3)
var4 = function(x) {x+3}
var4
mode(var4)
var5 = as.character(var1)
var5
mode(var5)
x <- c(1,2,3)
x
x1 = c(1,2,3)
x1
c(1,2,3) -> y
y
assign("z", c(6.3,4,-2)) # função para atribuir, atribuimos o veotr para "z"
z
# verificando o valor em uma posição específica
x[1]
x[1]
# verificar objetos
ls()
# verificando o valor em uma posição específica
z[1]
# verificar objetos
ls()
objects()
ls()
objects()
# remover objetos (variaveis)
rm(x)
x
nomes <- character()
idades <- numeric()
itens <- numeric()
codigos <- integer()
gc()
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/3.Linguagem-R- Fatores-Estruturas-de-Controle-e-Funcoes")
getwd()
str <- c('Expressões', 'regulares', 'em linguagem R',
'permitem a busca de padrões', 'e exploração de textos',
'podemos buscar padrões em dígitos',
'como por exemplo',
'10992451280')
length(str)
str
?grep
grep('ex', str, value = F)
grep('ex', str, value = F)
grep('ex', str, value = F)
# procurando o padrao 'ex' no string criado acima e exbindo em quais palavras foram encontrado
grep('ex', str, value = T)
# procurando o padrão pelo código '\\d' que o mesmo que buscar por digitos (0,1,2...9)
grep('\\d', str, value = F)
grep('\\d', str, value = T)
?grepl
grepl('\\d+', str)
grepl('\\d', str)
grepl('\\D', str)
gsub('em', '***', str)
gsub('em', '***', str, ignore.case = T)
gsub('ex', 'EX', str, ignore.case = T) # ignore.case ignora o case sensitive
sub('em', 'EM', str)
regexpr(pattern = 'u', frase) # encontrou a letra u na oitava posicao
frase <- 'Isso é uma string.'
regexpr(pattern = 'u', frase) # encontrou a letra u na oitava posicao
frase <- 'Isso é uuma string.'
regexpr(pattern = 'u', frase) # encontrou a letra u na oitava posicao
frase <- 'Isso é uma ustring.'
regexpr(pattern = 'u', frase) # encontrou a letra u na oitava posicao
frase <- 'Issou é uma string.'
regexpr(pattern = 'u', frase) # encontrou a letra u na oitava posicao
gregexpr(pattern = 'u', frase)
frase <- 'Isso é uma ustring.'
gregexpr(pattern = 'u', frase)
frase <- 'Isso é uma string.'
gregexpr(pattern = 'u', frase)
frase2 <- 'Isso é uma string com uva.'
gregexpr(pattern = 'u', frase2) # agora aponta aonde estao todas as letras 'u'
str2 <- c('2678 é maior que 45 - @????!$#',
'Vamos escrever 14 scripts em R')
str2
gsub('\\d', '', str2)
gsub('\\D', '', str2) # removendo os nao digitos
gsub('\\s', '', str2) # removendo os espacos
gsub('[iot]', '', str2) # removendo os nao digitos
gsub('[[:punct:]]', '', str2) # removendo as letras 'i', 'o' e 't'
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/3.Linguagem-R- Fatores-Estruturas-de-Controle-e-Funcoes")
getwd()
hoje <- Sys.Date()
hoje
class(hoje)
sys.time()
Sys.time()
Sys.timezone()
data_e_hora <- Sys.time()
data_e_hora
timezone <- Sys.timezone()
timezone
class(timezona)
class(timezone)
class(data_e_hora)
?strptime
as.Date("2018-06-28")
as.Date('Jun-28-18', format = '%b-%d-%y')
as.Date('28 June, 2018', format = '%d-%B, %Y')
as.Date('28 June, 2018', format = '%d-%B, %Y')
as.Date('28 June, 2018', format = '%d %B, %Y')
as.Date('28 June, 2018', format = "%d %B, %Y")
as.Date("28 June, 2018", format = "%d %B, %Y")
as.Date("28 Junho, 2018", format = "%d %B, %Y")
as.Date('Ju-28-18', format = '%b-%d-%y')
as.Date('Jun-28-18', format = '%b-%d-%y')
Sys.Date()
format(Sys.Date(), format = '%d-%B, %Y')
format(Sys.Date(), format = '%d %B, %Y')
format(Sys.Date(), format = 'Hoje é %A!')
format(Sys.Date(), format = '%d de %B, %Y')
date1 <- "Jun 13, '96 hours:23 minutes:01 seconds:45"
date1
date1_convert <- as.POSIXct(date1, format = "%B %d, '%y horas:%H minutos:%M segundos:%S")
date1_convert
date1 <- "Jun 13, '96 horas:23 minutos:01 segundos:45"
date1
date1_convert <- as.POSIXct(date1, format = "%B %d, '%y horas:%H minutos:%M segundos:%S")
date1_convert
date1 <- "Jun 13, '96 hours:23 minutes:01 seconds:45"
date1
date1_convert <- as.POSIXct(date1, format = "%B %d, '%y hours:%H minutes:%M seconds:%S")
date1_convert
date1 <- "Jun 13, '96 horas:23 minutos:01 segundos:45"
date1
date1_convert <- as.POSIXct(date1, format = "%B %d, '%y horas:%H minutos:%M segundos:%S")
date1_convert
data_de_hoje <- as.Date("2016-06-25", format = "%Y-%m-%d")
data_de_hoje
data_de_hoje + 1
my_time <- as.POSIXct("2016-05-14 11:24:134")
my_time
my_time <- as.POSIXct("2016-05-14 11:24:13")
my_time
my_time <- as.POSIXct("2016-05-14 11:24:134")
my_time
my_time + 1
data_de_hoje - as.Date(my_time)
data_de_hoje - my_time
dts = c(1127056501,1104295502,1129233601,1113547501,1119826801,1132519502,1125298801,1113289201)
myDates = dts
class(myDates) = c('POSIXt','POSIXct')
myDates
dts = c(1127056501,1104295502,1129233601,1113547501,1119826801,1132519502,1125298801,1113289201)
myDates = dts
myDates
class(myDates) = c('POSIXt','POSIXct')
myDates
myDates = structure(dts, class = c('POSIXt', 'POSIXct'))
myDates
class(myDates)
b1 = ISOdate(2011,3,23)
b1
b2 = ISOdate(2012,9,19)
b2
b2 - b1
difftime(b2, b1, units = 'weeks')
difftime(b2, b1, units = 'semanas')
difftime(b2, b1, units = 'weeks')
?lubridate
??lubridate
install.packages('lubridate')
require(lubridate)
?lubridate
ymd('20180604')
mdy('06-04-2018')
dmy('04/06/2018')
chegada <- ymd_hms('2016-06-04 12:00:00', tz = 'America/Sao_Paulo')
partida <- ymd_hms('2011-06-04 14:00:00', tz = 'America/Sao_Paulo')
chegada
partida
chegada <- ymd_hms('2016-06-04 12:00:00', tz = 'Pacific/Auckland')
partida <- ymd_hms('2011-06-04 14:00:00', tz = 'Pacific/Auckland')
chegada
partida
second(chegada)
second(chegada) <- 23
second(chegada)
chegada
wday(chegada)
wday(chegada, label = TRUE)
class(chegada)
# Cria um objeto que especifica a data de inicia e data de fim
interval(chegada, partida)
# Cria um objeto que especifica a data de inicia e data de fim
class(interval(chegada, partida))
tm1.lub <- ymd_hms('2020-05-24 23:55:26')
tm1.lub
tm2.lub <- mdy_hm('05/25/20 08:32')
tm2.lub
year(tm1.lub)
week(tm1.lub)
tm1.dechr <- hour(tm1.lub) + minute(tm1.lub)/60 + second(tm1.lub)/3600
tm1.dechr
force_tz(tm1.lub, 'Pacific/Auckland')
sono <- data.frame(bed.time = ymd_hms('2013-09-01 23:05:24', '2013-09-02 22:51:09',
'2013-09-04 00:09:16', '2013-09-04 23:43:31', '2013-09-06 00:17:41', '2013-09-04 22:42:27',
'2013-09-08 00:22:27'), rise.time = ymd_hms('2013-09-02 08:03:29', '2013-09-03 07:34:21',
'2013-09-04 07:45:06', '2013-09-05 07:07:17', '2013-09-06 08:17:13', '2013-09-07 06:52:11',
'2013-09-08 07:15:19'), sleep.time = dhours(c(6.74, 7.92, 7.01, 6.23, 6.34, 7.42, 6.45)))
View(sono)
sono
sono$eficiencia <- round(sono$sleep.time/(sono$rise.time - sono$bed.time) * 100, 1)
sono
sono <- data.frame(bed.time = ymd_hms('2013-09-01 23:05:24', '2013-09-02 22:51:09',
'2013-09-04 00:09:16', '2013-09-04 23:43:31', '2013-09-06 00:17:41', '2013-09-06 22:42:27',
'2013-09-08 00:22:27'), rise.time = ymd_hms('2013-09-02 08:03:29', '2013-09-03 07:34:21',
'2013-09-04 07:45:06', '2013-09-05 07:07:17', '2013-09-06 08:17:13', '2013-09-07 06:52:11',
'2013-09-08 07:15:19'), sleep.time = dhours(c(6.74, 7.92, 7.01, 6.23, 6.34, 7.42, 6.45)))
sono
sono$eficiencia <- round(sono$sleep.time/(sono$rise.time - sono$bed.time) * 100, 1) # formula da eficiencia do sono
sono
par(mar = c(5, 4, 4, 4))
par(mar = c(5, 4, 4, 4))
plot(round_date(sono$rise.time, 'day'), sono$eficiencia, type = 'o', col = 'blue', xlab = 'Manhã', ylab = NA)
par(new = TRUE)
plot(round_date(sono$rise.time, 'day'), sono$sleep.time/3600, type = 'o', col = 'red', axes = FALSE, ylab = NA, xlab = NA)
axis(side = 4)
mtext(side = 4,line = 2.5, col = 'red', 'Duração do Sono')
mtext(side = 2,line = 2.5, col = 'blue', 'Eficiência do Sono')
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/3.Linguagem-R- Fatores-Estruturas-de-Controle-e-Funcoes")
getwd()
gc()
vec1 = 1:4
vec2 <- 1:4
class(vec1)
class(vec2)
typeof(vec1)
typeof(vec2)
mean(x = 1:10)
x
mean(x = 1:10)
x
mean(y <- 1:10)
y
lista <- list(a = (1:20), b = (45:77))
lista
sapply(lista, sum)
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/3.Linguagem-R- Fatores-Estruturas-de-Controle-e-Funcoes")
getwd()
