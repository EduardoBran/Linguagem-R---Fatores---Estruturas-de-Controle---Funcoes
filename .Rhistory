amostra
summary(as.factor(amostra))
# 150 amostras, de 0 e 1, com reposição, mais chances para zero
amostra = sample(c(0, 1), 150, replace = TRUE, prob=c(0.7, 0.3))
amostra
summary(as.factor(amostra))
amostra
# 150 amostras, de 0 e 1, com reposição, mais chances para zero
amostra = sample(c(0, 1), 150, replace = FALSE)
amostra
amostra
amostra
amostra2
# 150 amostras, de 0 e 1, sem reposição, mais chances para zero
amostra2 = sample(c(0:1000), 150, replace = FALSE)
amostra2
# 150 amostras, de 0 a 1000, sem reposição, mais chances para zero
# nao repete numeros
amostra2 = sample(c(0:1000), 150, replace = FALSE)
amostra2
# Gerando amostra de conjunto de dados Iris
# Gerando 30% dos dados de iris
amostra = sample(c(0, 1), 150, replace = TRUE, prob=c(0.7, 0.3))
summary(as.factor(amostra))
# Gerando amostra de conjunto de dados Iris
# Gerando 30% dos dados de iris
amostra = sample(c(0, 1), 150, replace = TRUE, prob=c(0.7, 0.3))
summary(as.factor(amostra))
amostrairis
# Gerando a amostra
amostra_iris = iris[amostra==1,]
amostrairis
amostra_iris
dim(amostra_iris)
# Gerando a amostra
amostra_iris = iris[amostra==1,]
amostra_iris
dim(amostra_iris)
# Repetir o experimento (vem os mesmos valores acima)
set.seed(2345)
sample(c(1000), 1)
set.seed(2345)
set.seed(2345)
sample(c(1000), 1)
# Repetindo
set.seed(2345)
sample(c(1000), 1)
install.packages("TeachingSampling")
# install.packages("TeachingSampling")
library("TeachingSampling")
install.packages("Rtools")
amostra = S.SY(150, 10)
amostra
dim(amostra)
amostra
amostra
# gerando amostra sistematica até 150 em 10 grupos
amostra = S.SY(150, 10)
amostra
amostra_iris = iris[amostra,]
amostra_iris = iris[amostra,]
amostra_iris = iris[amostra,]
amostra_iris
dim(amostra_iris)
install.packages("sampling")
library("sampling")
proporcao = 25
amostra_iris = strata(data=iris, stratanames=c('Species'), size=c(rep(proporcao, 3)), method='srswor')
# Exibindo resultado através de um sumario
summary(amostra_iris)
infert
summary(infert)
# outro exemplo usando conjunto de dados infert (características de infertilidade)
infert
summary(infert)
amostra_infert = strata(data = infert, stratanames = c("education"), size = c(5,48,47), method = 'srswor)
# resultado
amostra_infert
summary(amostra_infert)
amostra_infert = strata(data = infert, stratanames = c("education"), size = c(5,48,47), method = 'srswor)
# resultado
amostra_infert
summary(amostra_infert)
amostra_infert
amostra_infert = strata(data = infert, stratanames = c("education"), size = c(5,48,47), method = 'srswor)
amostra_infert = strata(data = infert, stratanames = c("education"), size = c(5,48,47), method = 'srswor')
# resultado
amostra_infert
summary(amostra_infert)
# Dados dos jogadores
jogadores = c(40000, 18000, 12000, 250000, 30000, 140000, 300000, 40000, 800000)
jogadores
mean(jogadores)
median(jogadores)
# Quartis
quartis = quantile(jogadores)
quartis
quartis[4]
sd(jogadores)
summary(jogadores)
options(warn=-1)
install.packages("semTools")
library(semTools)
z = rep(0, 500)
# Gera as amostras
for (i in 1:500) {
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(5, 2), kurtosis = c(3, 3))
# grava a média da amostra
z[i] = mean(m)
#imprime as 3 primeiras
if (i < 4) {
hist(m, breaks=50, main=paste0("Histrograma", i))
}
}
m
# m Gera as amostras/dados enviesados(por isso o skewness, kurtosis)
for (i in 1:500) {
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(5, 2), kurtosis = c(3, 3))
# m
# grava a média da amostra
z[i] = mean(m)
#imprime as 3 primeiras
if (i < 4) {
hist(m, breaks=50, main=paste0("Histrograma ", i))
}
}
hist(z)
set.seed(123)
x = rnorm(1000)
qqnorm(x)
# Gráfico QQ (rodar com ctrl shif enter)
qqnorm(x)
#linha
qqline(x)
#linha
qqline(x)
#linha
qqline(x)
qqnorm(x)
# Gráfico QQ (rodar com ctrl shif enter)
qqnorm(x)
#linha
qqline(x)
shapiro.test(x)
hist(x, main="")
hist(x)
# Histograma com linha de densidade (rodar com ctrl shif enter)
hist(x, main='')
par(new=TrUE)
# Histograma com linha de densidade (rodar com ctrl shif enter)
hist(x, main='')
par(new=TRUE)
plot(density(x), ylab="", xlab="", axes=F, lwd=2.5)
# Exemplo com Dados não normalmente distribuidos
install.packages("semTools")
library(semTools)
install.packages("semTools")
library(semTools)
# Exemplo com Dados não normalmente distribuidos
# install.packages("semTools")
library(semTools)
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness=c(5, 2), kurtosis= c(3,3))
qqnorm(m)
qqline(m)
shapiro.test(m)
shapiro.test(m)
hist(m, main="")
# Histograma (rodar com ctrl shif enter)
hist(m, main="")
par(new=TRUE)
plot(density(x), ylab="", xlab="", axes=F, lwd=2.5)
mean(x)
mean(x)
# Amostra Pequena
# Espera-se uma média de 3,5
# Gerando a média
x = sample(1:6, 6, replace = T)
mean(x)
# Amostra Pequena
# Espera-se uma média de 3,5
# Gerando a média
x = sample(1:6, 6, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
plot(cars)
plot(cars)
getwd()
# Multiplicação
5 * 5
6 / 2
# Potência
3^2
3**2
# Módulo
16 %% 3
x = 7
y = 5
# Operadores
x > 8
x < 8
x <= 8
x >= 8
x == 8
x != 8
# And
(x==8) & (x==6)
(x==7) & (x==5)
(x==8) & (x==5)
# Or
(x==8) | (x>5)
(x==8) & (x>=5)
# Not
x > 8
print(!x > 8)
getwd()
var1
var1 = 100
var1
var1
var1
var1
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
vari
# criando variáveis
var1
# criando variáveis
var1
mode(var1)
var1 = 100
var1
mode(var1)
help("mode")
sqrt(var1)
help("sqrt")
var1 = var2
var2 = var1
var2
mode(var2)
typeof(var2)
help("typeof")
var2 = var1
var2
mode(var2)
typeof(var2)
help("typeof")
var3 = c("primeiro", "segundo", "terceiro")
var3
mode(var3)
var4 = function(x) {x+3}
var4
mode(var4)
var5 = as.character(var1)
var5
mode(var5)
x <- c(1,2,3)
x
x1 = c(1,2,3)
x1
c(1,2,3) -> y
y
assign("z", c(6.3,4,-2)) # função para atribuir, atribuimos o veotr para "z"
z
# verificando o valor em uma posição específica
x[1]
x[1]
# verificar objetos
ls()
# verificando o valor em uma posição específica
z[1]
# verificar objetos
ls()
objects()
ls()
objects()
# remover objetos (variaveis)
rm(x)
x
nomes <- character()
idades <- numeric()
itens <- numeric()
codigos <- integer()
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/3.Linguagem-R- Fatores-Estruturas-de-Controle-e-Funcoes")
getwd()
# Exercicio 1 - Pesquise pela funcao que permite listar todos os arquivo no diretorio de trabalho
dir()
df_exe2 <- data.frame(c('a', 'b', 'c'))
df_exe2
View(df_exe2)
df_exe2 <- data.frame(c('a', 'b', 'c'),c(1,0,1,0))
vet_car <- c('a', 'b', 'c', 'd')
vet_log <- c(TRUE, FALSE, TRUE, FALSE)
vet_num <- c(150, 270, 380, 490)
vet_log
df_exe2 <- data.frame(vet_car, vet_log, vet_num)
df_exe2
View(df_exe2)
str(df_exe2)
names(df_exe2) = c('')
df_exe2
names(df_exe2) = c('Caracteres', 'Lógico', 'Numérico')
View(df_exe2)
vec_exe3 <- c(12, 3, 4, 19, 34)
vec1_exe3
vec_exe3 <- c(12, 3, 4, 19, 34)
vec1_exe3
vec_exe3
for(i in vec_exe3){
print(i)
}
for(i in vec_exe3){
if(i > 10){
print('O numero', i, 'é maior que 10')
}
}
for(i in vec_exe3){
if(i > 10){
print(paste('O numero', i, 'é maior que 10'))
}
}
subset(df_exe2, Numerico > 269)
iris
df_exe2
subset(df_exe2, Numérico > 269)
subset(df_exe2, Numérico > 270)
names(df_exe2) = c('Caracteres', 'Logico', 'Numerico')
subset(df_exe2, Numerico > 270)
qtd = qtd + 1
qtd = 0
qtd = 0
for(i in vec_exe3){
if(i > 10){
qtd = qtd + 1
print(paste('O numero', i, 'é maior que 10'))
}
}
print(paste('Tem ', qtd, ' numeros maior que 10'))
lista_exe4 <- list(2, 3, 5, 7, 11, 13)
lista_exe4
for(i in lista_exe4) {
print(i)
}
?lapply()
?lapply
mat1_exe5 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = T)
mat1_exe5 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = T)
mat1_exe5
mat2_exe5 <- t(mat1_exe5)
mat2_exe5
mat1_exe5 <- matrix(c(1:50), nrow = 10, ncol = 10, byrow = T)
mat1_exe5
mat1_exe5 <- matrix(c(1:50), nrow = 10, ncol = 5, byrow = T)
mat1_exe5
mat2_exe5 <- t(mat1_exe5)
mat2_exe5
mat1_exe5 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = T)
mat1_exe5
mat2_exe5 <- t(mat1_exe5)
mat2_exe5
?t
mat1_exe5 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = F)
mat1_exe5
mat1_exe5 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = T)
mat1_exe5
mat2_exe5 <- t(mat1_exe5)
mat2_exe5
mat_element <- mat1_exe5 * mat2_exe5
mat_element
mat_normal <- mat1_exe5 %*% mat2_exe5
mat_normal
mat1_exe5 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = T)
mat1_exe5
mat2_exe5 <- t(mat1_exe5)
mat2_exe5
mat_normal <- mat1_exe5 %*% mat2_exe5
mat_normal
mat1_exe5 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = T)
mat1_exe5
mat2_exe5 <- t(mat1_exe5)
mat2_exe5
mat_element <- mat1_exe5 * mat2_exe5
mat_element
mat1_exe5 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = T)
mat1_exe5
mat2_exe5 <- t(mat1_exe5)
mat2_exe5
mat_normal <- mat1_exe5 %*% mat2_exe5
mat_normal
gc()
mat1_exe5 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = T)
mat1_exe5
mat2_exe5 <- t(mat1_exe5)
mat2_exe5
mat_normal <- mat1_exe5 %*% mat2_exe5
mat_normal
m <- matrix(c(3,4,5,1), nrow = 2, ncol = 2)
m
m <- matrix(c(3,4,5,1), nrow = 2, ncol = 2, byrow = T)
m
i <- matrix(c(1,0,0,1), nrow = 2, ncol = 2, byrow = T)
i
m_i <- m %*% i
m_i
m_i <- m * i
m_i
m <- matrix(c(3,4,5,1), nrow = 2, ncol = 2, byrow = T)
m
i <- matrix(c(1,1,1,1), nrow = 2, ncol = 2, byrow = T)
i
m_i <- m %*% i
m_i
m_i <- m * i
m_i
m_i_element <- m * i
m_i_element
m_i_normal <- m %*% i
m_i_normal
mat_exe6 <- matrix(1, 2, 3)
mat_exe6
?sample
mat_exe7 <- matrix(1:90, 10)
mat_exe7
mat_exe7 <- matrix(1:90, 9)
mat_exe7
mat_exe7 <- matrix(1:89, 10)
mat_exe7
mat_exe7 <- matrix(1:90, 10)
mat_exe7
?sample
sample(mat_exe7)
sample(mat_exe7, replace = TRUE)
sample(mat_exe7, replace = TRUE)
sample(mat_exe7, replace = TRUE)
sample(mat_exe7[mat_exe7 > 20])
sample(mat_exe7[mat_exe7 > 20 = NA])
sample(mat_exe7[if mat_exe7 > 20 ])
sample(mat_exe7[if(mat_exe7 > 20){mat_exe7 = NA} ])
sample(mat_exe7[if(mat_exe7 > 20)mat_exe7 = NA ])
sample(mat_exe7[mat_exe7 > 20])
sample(mat_exe7, 50, replace = NA)
sample(mat_exe7, 50, replace = TRUE)
?sample
indices_na <- sample(length(mat_exe7), 50)
indices_na
indices_na <- sample(length(mat_exe7), 50)
indices_na
mat_exe7[indices_na] <- NA
mat_exe7
vet_exe6 <- c(1, 2, 3, 4, 5)
vet_exe6
names(vet_exe6) <- c("elem1", "elem2", "elem3", "elem4", "elem5")
vet_exe6
# Criando uma matriz 2x2
mat_exe6 <- matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2)
mat_exe6
rownames(minha_matriz) <- c("linha1", "linha2")
rownames(mat_exe6) <- c("linha1", "linha2")
colnames(mat_exe6) <- c("col1", "col2")
mat_exe6
print(mat_exe6)
lista_exe6 <- list(nome = 'Joao', idade = 30, altura = 1.77)
lista_exe6
# Nomeando os elementos da lista
names(lista_exe6) <- c('Nome', 'Idade', 'Altura')
# Nomeando os elementos da lista
names(lista_exe6) <- c('Nome', 'Idade', 'Altura')
lista_exe6
# Criando um dataframe com 3 colunas
df_exe6 <- data.frame(nome = c('Joao', 'Alice', 'Pedro'),
idade = c(39, 8, 22),
altura = c(1.92, 1.42, 1.71))
df_exe6
# Nomeando as colunas do dataframe
names(df_exe6) <- c('Nome', 'Idade', 'Altura')
df_exe6
mat_exe8 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = T)
mat_exe8
mat_exe8 <- matrix(c(1:50), nrow = 10, ncol = 5, byrow = T)
mat_exe8
soma_por_linha <- apply(mat_exe8, 1, sum)
soma_por_linha
soma_por_coluna <- apply(mat_exe8, 2, sum)
soma_por_coluna
vet_exe9 <- c(100, 10, 10000, 1000)
vet_exe9
vet_exe9_ordernado <- sort(vet_exe9)
vet_exe9_ordernado
mat_exe10 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = T)
mat_exe10
mat_exe10 <- matrix(c(1:50), nrow = 10, ncol = 5, byrow = T)
mat_exe10
for(i in mat_exe10){
if(i > 15){
print(i)
}
}
